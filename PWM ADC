
#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/adc.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"


uint32_t g_ui32SysClock;

#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
}
#endif


// Configure PWM for dead-band generation.
//
//*****************************************************************************
int freq = 50000;
int freq1 = 1000;
volatile float  RazaoCiclica = 3497;//00%=14996 10%=13497  50%= 7497 ===240M/(16*1k)
uint32_t pui32ADC0Value[1];


void Init_ADC(void);
void Init_ADC(void){
     // The ADC0 peripheral must be enabled for use.
     SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
     // For this example ADC0 is used with AIN0 on port E3.
     SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
      // Select the analog ADC function for these pins.
     GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_1);
     // Enable sample sequence 3 with a processor signal trigger.
     ADCSequenceConfigure(ADC0_BASE, 0, ADC_TRIGGER_PROCESSOR, 0);
     // Configure step 0 on sequence 3.  Sample channel 0 (ADC_CTL_CH0) in
     // single-ended mode (default) and configure the interrupt flag
     // (ADC_CTL_IE) to be set when the sample is done.  Tell the ADC logic
     // that this is the last conversion on sequence 3 (ADC_CTL_END).
     ADCSequenceStepConfigure(ADC0_BASE, 0, 0, ADC_CTL_CH0 | ADC_CTL_IE |
                              ADC_CTL_END);
     // Since sample sequence 3 is now configured, it must be enabled.
     ADCSequenceEnable(ADC0_BASE, 0);
     // Clear the interrupt status flag.
     ADCIntClear(ADC0_BASE, 0);
}


void main ()
{
    uint32_t ui32PWMClockRate;
    void Init_ADC(void);

    g_ui32SysClock = MAP_SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
                                             SYSCTL_OSC_MAIN |
                                             SYSCTL_USE_PLL |
                                             SYSCTL_CFG_VCO_240), 120000000);
    // Enable the GPIO port that is used for the on-board LED.
       MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
       MAP_GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0);
      //



    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    MAP_GPIOPinConfigure(GPIO_PF1_M0PWM1);
    MAP_GPIOPinConfigure(GPIO_PF2_M0PWM2);
    MAP_GPIOPinConfigure(GPIO_PF3_M0PWM3);
    MAP_GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1);

    MAP_PWMClockSet(PWM0_BASE, PWM_SYSCLK_DIV_8);
    ui32PWMClockRate = g_ui32SysClock / 8;

    MAP_PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN);
    MAP_PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, (ui32PWMClockRate / freq1));
    MAP_PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, RazaoCiclica); // pwm 10^16
    MAP_PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, RazaoCiclica);


    MAP_PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC); // PWM GEN 0 FAZ USO DE 1 E 2
    MAP_PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, (ui32PWMClockRate / freq));
    MAP_PWMPulseWidthSet(PWM0_BASE, PWM_OUT_2, MAP_PWMGenPeriodGet(PWM0_BASE, PWM_GEN_1) / 2);
    MAP_PWMPulseWidthSet(PWM0_BASE, PWM_OUT_3, MAP_PWMGenPeriodGet(PWM0_BASE, PWM_GEN_1) / 2);



    MAP_PWMDeadBandEnable(PWM0_BASE, PWM_GEN_1, 3, 3);
    MAP_PWMDeadBandEnable(PWM0_BASE, PWM_GEN_0, 3, 3);

    MAP_PWMOutputState(PWM0_BASE, PWM_OUT_1_BIT | PWM_OUT_2_BIT | PWM_OUT_3_BIT, true); // FUNÇÃO OU PARA HABILITAR

    MAP_PWMGenEnable(PWM0_BASE, PWM_GEN_0); // FUNÇÃO OU PARA HABILITAR
    MAP_PWMGenEnable(PWM0_BASE, PWM_GEN_1);


    while(1)
    {

        ADCProcessorTrigger(ADC0_BASE, 0);
        while(!ADCIntStatus(ADC0_BASE, 0, false))
            {
            }
        ADCIntClear(ADC0_BASE, 0);
        MAP_ADCSequenceDataGet(ADC0_BASE, 0, pui32ADC0Value);
        RazaoCiclica = (((float) pui32ADC0Value[0] * 3.32) * 100)/(4096.0);
        MAP_PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, RazaoCiclica);
        
        // Turn on the LED.
        //
        MAP_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0);

        //
        // This function provides a means of generating a constant length
        // delay.  The function delay (in cycles) = 3 * parameter.  Delay
        // 0.5 seconds arbitrarily.
        //
        MAP_SysCtlDelay((g_ui32SysClock / 2) / 3);

        //
        // Turn off the LED.
        //
        MAP_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0x00);

        //
        // This function provides a means of generating a constant length
        // delay.  The function delay (in cycles) = 3 * parameter.  Delay
        // 0.5 seconds arbitrarily.
        //
        MAP_SysCtlDelay((g_ui32SysClock / 2) / 3);
    }
}
